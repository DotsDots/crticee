
#include "curses.h"

WINDOW *create_newwin(int height, int width, int starty, int startx);
void print_line(WINDOW *win, int starty, int startx, int boja, char *string);
void print_menu(WINDOW *menu_win, int highlight);
void report_choice(int mouse_x, int mouse_y, int *p_choice);
char mat[20][30];int startx = 0, y, x;
int starty = 0;
char c;

int dimx = 8;
int dimy = 8;
int prevx= 0;

int prevy = 0;

int main(int argc, char *argv[])
{

	MEVENT event;
	attron(A_BOLD);
	int i, j, height = 25, width = 60, starty, startx;
	char poz;
	initscr();
	clear();
	noecho();	cbreak();

	curs_set(0);

	starty = (LINES - height) / 2;
	startx = (COLS - width) / 2;
	keypad(stdscr, TRUE);
	print_menu(stdscr, 1);
	mousemask(ALL_MOUSE_EVENTS, NULL);

	if (has_colors() == FALSE)
	{
		endwin();
		mvwprintw(stdscr, starty + 1, startx + 1, "No color");
		exit(1);
	}


	for (i = 1; i <= dimy*2+1; i++)
	{
		for (j = 1; j <= dimx*3 +1; j++)
			mat[i][j] = 'n';
	}
	while (1)
	{
		c = wgetch(stdscr);
		if (nc_getmouse(&event) == OK) //ako je klik misa
		{
			if (event.bstate)
			{
				y = event.y;
				x = event.x;
				if (x <= dimx * 3 + 1 && y <= dimy * 2 + 1) //ako je u okviru tabele
				{

					if (!((x % 3 != 1) && (y % 2 == 0))) //ako nije prazna
					{


						if (mat[event.y][event.x] == 'n')     //ako nije vec kliknut
						{

							if (prevx % 3 == 1)    //ako je vertikalna
							{
							
								prevy = (prevy / 2) * 2;
								//mat[prevy][prevx] = 's';
								print_line(stdscr, prevy + 1, prevx, 1, prevy + 1, prevx);
								print_line(stdscr, prevy, prevx, 1, prevy, prevx);
								refresh();
								
							}
							else			 //horizontalna
							{
								
							//	mat[prevy][prevx] = 's';
								prevx = (prevx + 1) / 3 * 3;
								print_line(stdscr, prevy, prevx, 1, prevy, prevx);
								print_line(stdscr, prevy, prevx - 1, 1, prevy, prevx - 1);

							}
							if (x % 3 == 1)    //ako je vertikalna
							{
								prevx = x;
								prevy = y;
								y = (y / 2) * 2;
								mat[y][x] = 'p';
								print_line(stdscr, y + 1, x, 2, y + 1, x);
								print_line(stdscr, y, x, 2, y, x);
								
								
							}
							else			 //horizontalna
							{
								prevx = x;
								prevy = y;
								mat[y][x] = 'p';
								x = (x + 1) / 3 * 3;
								print_line(stdscr, y, x, 2, y, x);
								print_line(stdscr, y, x - 1, 2, y, x - 1);
								
							}



							refresh();
						}
					}
				}

			}
		}
		}
	

	attroff(A_BOLD);
	getch();
	endwin();

}
void print_line(WINDOW *win, int starty, int startx, int boja, int i, int j)
{
	start_color();
	init_pair(1, COLOR_WHITE, COLOR_BLACK);
	init_pair(2, COLOR_RED, COLOR_BLACK);
	init_pair(3, COLOR_CYAN, COLOR_BLACK);

	if (/*mat[i][j]='n'*/ boja == 0)	attron(COLOR_PAIR(1));
	else if (/*mat[i][j] = 's'*/ boja == 1) attron(COLOR_PAIR(2));
	else if (/*mat[i][j] = 'p'*/ boja == 2) attron(COLOR_PAIR(3));

	int length, x, y;
	float temp;
	if (win == NULL)
		win = stdscr;
	getyx(win, y, x);
	if (startx != 0)
		x = startx;
	if (starty != 0)
		y = starty;
	boja = 0;

	temp = 0;
	x = startx + (int)temp;
	if (i % 2 == 1)
	if (i == 1 && j % 3 == 1) mvwprintw(win, y, x, ".");

	else
	if (j % 3 == 1)	mvwprintw(win, y, x, "|");
	else mvwprintw(win, y, x, "_");


	else
	if (j % 3 == 1) mvwprintw(win, y, x, "|");
	else mvwprintw(win, y, x, "  ");

	refresh();


	if (/*mat[i][j]='n'*/ boja == 0)	attroff(COLOR_PAIR(1));
	else if (/*mat[i][j] = 's'*/boja == 1) attroff(COLOR_PAIR(2));
	else if (/*mat[i][j] = 'p'*/ boja == 2) attroff(COLOR_PAIR(3));
}WINDOW *create_newwin(int height, int width, int starty, int startx)
{
	WINDOW *local_win;
	local_win = newwin(height, width, starty, startx);
	box(local_win, 0, 0);
	wrefresh(local_win);
	return local_win;
}void print_menu(WINDOW *menu_win, int p)
{
	int x, y, i, j;
	x = 2;
	y = 2;
	box(menu_win, 0, 0);
	for (i = 1; i <= (dimy * 2 + 1); i++)
	{
		for (j = 1; j <= (dimx * 3 + 1); j++)
		{
			print_line(menu_win, i, j, 0, i, j);

		}


	}

	wrefresh(menu_win);
}
/* Report the choice according to mouse position */
void report_choice(int mouse_x, int mouse_y, int *p_choice)
{
	int i, j, choice;

	i = startx + 2;
	j = starty + 3;
}
void koord_crtanje(int x1, int y1, int  x2, int y2, int i1, int j1, int i2, int j2)
{
	if (x1 == x2)
	{
		i1 = x1 * 2;
		i2 = i1 + 1;
		j1 = j2 = j1 * 3 + 1;
	}
	else
	{
		i1 = i2 = x1 * 2 + 1;
		j1 = y1 * 3 - 1;
		j2 = y1 * 3;

	}


}
void koord_game(int x1, int y1, int  x2, int y2, int i1, int j1)
{
	if (j1 % 3 == 1)
	{
		x1 = x2 = i1 / 2;
		y1 = (j1 - 1) / 3;
		y2 = (j1 - 1) / 3 + 1;

	}
	else
	{
		x1 = i1 / 2;
		x2 = i1 / 2 + 1;
		y1 = y2 = (j1 + 1) / 3;

	}



}